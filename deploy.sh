#!/bin/bash

# üöÄ Script de D√©ploiement Automatique SOTUMA
# Usage: ./deploy.sh [environment]
# Environments: shared, vps, local

set -e

# Configuration
PROJECT_NAME="SOTUMA"
REPO_URL="https://github.com/rokhsario/sotuma.git"
ENVIRONMENT=${1:-shared}

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
print_step() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rification des pr√©requis
check_requirements() {
    print_step "V√©rification des pr√©requis..."
    
    # PHP
    if ! command -v php &> /dev/null; then
        print_error "PHP n'est pas install√©"
        exit 1
    fi
    
    # Composer
    if ! command -v composer &> /dev/null; then
        print_error "Composer n'est pas install√©"
        exit 1
    fi
    
    # MySQL
    if ! command -v mysql &> /dev/null; then
        print_warning "MySQL client n'est pas install√©"
    fi
    
    print_success "Pr√©requis v√©rifi√©s"
}

# Installation des d√©pendances
install_dependencies() {
    print_step "Installation des d√©pendances..."
    
    if [ "$ENVIRONMENT" = "local" ]; then
        composer install
    else
        composer install --no-dev --optimize-autoloader
    fi
    
    if command -v npm &> /dev/null; then
        npm install
        if [ "$ENVIRONMENT" != "local" ]; then
            npm run production
        fi
    else
        print_warning "NPM n'est pas install√© - assets non compil√©s"
    fi
    
    print_success "D√©pendances install√©es"
}

# Configuration de l'environnement
setup_environment() {
    print_step "Configuration de l'environnement..."
    
    if [ ! -f .env ]; then
        if [ -f .env.example ]; then
            cp .env.example .env
            print_success "Fichier .env cr√©√© √† partir de .env.example"
        else
            print_error "Fichier .env.example introuvable"
            exit 1
        fi
    fi
    
    # G√©n√©ration de la cl√© d'application
    php artisan key:generate --force
    
    # Configuration selon l'environnement
    case $ENVIRONMENT in
        "shared")
            sed -i 's/APP_ENV=local/APP_ENV=production/' .env
            sed -i 's/APP_DEBUG=true/APP_DEBUG=false/' .env
            ;;
        "vps")
            sed -i 's/APP_ENV=local/APP_ENV=production/' .env
            sed -i 's/APP_DEBUG=true/APP_DEBUG=false/' .env
            ;;
        "local")
            sed -i 's/APP_ENV=production/APP_ENV=local/' .env
            sed -i 's/APP_DEBUG=false/APP_DEBUG=true/' .env
            ;;
    esac
    
    print_success "Environnement configur√© pour: $ENVIRONMENT"
}

# Configuration de la base de donn√©es
setup_database() {
    print_step "Configuration de la base de donn√©es..."
    
    # Demander les informations de base de donn√©es
    echo -e "${YELLOW}Configuration de la base de donn√©es:${NC}"
    read -p "Host de la base de donn√©es (localhost): " DB_HOST
    DB_HOST=${DB_HOST:-localhost}
    
    read -p "Nom de la base de donn√©es (sotuma): " DB_DATABASE
    DB_DATABASE=${DB_DATABASE:-sotuma}
    
    read -p "Nom d'utilisateur: " DB_USERNAME
    read -s -p "Mot de passe: " DB_PASSWORD
    echo
    
    # Mise √† jour du fichier .env
    sed -i "s/DB_HOST=.*/DB_HOST=$DB_HOST/" .env
    sed -i "s/DB_DATABASE=.*/DB_DATABASE=$DB_DATABASE/" .env
    sed -i "s/DB_USERNAME=.*/DB_USERNAME=$DB_USERNAME/" .env
    sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=$DB_PASSWORD/" .env
    
    # Test de connexion
    if php artisan migrate:status &> /dev/null; then
        print_success "Connexion √† la base de donn√©es √©tablie"
    else
        print_error "Impossible de se connecter √† la base de donn√©es"
        print_warning "V√©rifiez vos param√®tres dans le fichier .env"
        exit 1
    fi
}

# Migration de la base de donn√©es
migrate_database() {
    print_step "Migration de la base de donn√©es..."
    
    if [ "$ENVIRONMENT" = "local" ]; then
        php artisan migrate
    else
        php artisan migrate --force
    fi
    
    # Demander si on veut seeder
    read -p "Voulez-vous seeder la base de donn√©es ? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if [ "$ENVIRONMENT" = "local" ]; then
            php artisan db:seed
        else
            php artisan db:seed --force
        fi
        print_success "Base de donn√©es seed√©e"
    fi
    
    print_success "Migration termin√©e"
}

# Configuration du stockage
setup_storage() {
    print_step "Configuration du stockage..."
    
    # Cr√©er le lien symbolique
    php artisan storage:link
    
    # D√©finir les permissions appropri√©es
    if [ "$ENVIRONMENT" != "local" ]; then
        chmod -R 755 storage/
        chmod -R 755 bootstrap/cache/
        
        # Si on est root, changer le propri√©taire
        if [ "$EUID" -eq 0 ]; then
            chown -R www-data:www-data storage/
            chown -R www-data:www-data bootstrap/cache/
        fi
    fi
    
    print_success "Stockage configur√©"
}

# Optimisation pour la production
optimize_for_production() {
    if [ "$ENVIRONMENT" != "local" ]; then
        print_step "Optimisation pour la production..."
        
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
        
        print_success "Application optimis√©e"
    fi
}

# Tests post-d√©ploiement
run_tests() {
    print_step "Tests post-d√©ploiement..."
    
    # Test de base - v√©rifier que l'application d√©marre
    if php artisan --version &> /dev/null; then
        print_success "Laravel fonctionne correctement"
    else
        print_error "Probl√®me avec Laravel"
        exit 1
    fi
    
    # Test de la base de donn√©es
    if php artisan migrate:status &> /dev/null; then
        print_success "Base de donn√©es accessible"
    else
        print_error "Probl√®me avec la base de donn√©es"
    fi
    
    # Test du stockage
    if [ -L public/storage ]; then
        print_success "Lien de stockage cr√©√©"
    else
        print_warning "Lien de stockage manquant"
    fi
}

# Affichage des informations finales
show_final_info() {
    print_success "üéâ D√©ploiement termin√© avec succ√®s !"
    echo
    echo -e "${BLUE}üìã Informations importantes:${NC}"
    echo -e "‚Ä¢ Environnement: ${YELLOW}$ENVIRONMENT${NC}"
    echo -e "‚Ä¢ URL locale: ${YELLOW}http://localhost:8000${NC}"
    echo -e "‚Ä¢ Admin: ${YELLOW}admin@gmail.com${NC} / ${YELLOW}1111${NC}"
    echo
    echo -e "${BLUE}üöÄ Pour d√©marrer l'application:${NC}"
    echo -e "  ${YELLOW}php artisan serve${NC}"
    echo
    echo -e "${BLUE}üìÅ Fichiers importants:${NC}"
    echo -e "  ‚Ä¢ Configuration: ${YELLOW}.env${NC}"
    echo -e "  ‚Ä¢ Logs: ${YELLOW}storage/logs/laravel.log${NC}"
    echo
    if [ "$ENVIRONMENT" != "local" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  N'oubliez pas de:${NC}"
        echo -e "  ‚Ä¢ Configurer votre domaine"
        echo -e "  ‚Ä¢ Installer un certificat SSL"
        echo -e "  ‚Ä¢ Configurer les sauvegardes"
    fi
}

# Script principal
main() {
    echo -e "${GREEN}üöÄ D√©ploiement de $PROJECT_NAME${NC}"
    echo -e "Environnement: ${YELLOW}$ENVIRONMENT${NC}"
    echo "=================================="
    
    check_requirements
    install_dependencies
    setup_environment
    setup_database
    migrate_database
    setup_storage
    optimize_for_production
    run_tests
    show_final_info
}

# Gestion des erreurs
trap 'print_error "Erreur lors du d√©ploiement"; exit 1' ERR

# Ex√©cution du script principal
main "$@"
